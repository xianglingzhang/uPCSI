// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ROPHEADER_APSU_NETWORK_FBS_H_
#define FLATBUFFERS_GENERATED_ROPHEADER_APSU_NETWORK_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace apsu {
namespace network {
namespace fbs {

struct ReceiverOperationHeader;
struct ReceiverOperationHeaderBuilder;

enum ReceiverOperationType : uint32_t {
  ReceiverOperationType_rop_unknown = 0,
  ReceiverOperationType_rop_parms = 1,
  ReceiverOperationType_rop_oprf = 2,
  ReceiverOperationType_rop_query = 3,
  ReceiverOperationType_rop_response = 4,
  ReceiverOperationType_MIN = ReceiverOperationType_rop_unknown,
  ReceiverOperationType_MAX = ReceiverOperationType_rop_response
};

inline const ReceiverOperationType (&EnumValuesReceiverOperationType())[5] {
  static const ReceiverOperationType values[] = {
    ReceiverOperationType_rop_unknown,
    ReceiverOperationType_rop_parms,
    ReceiverOperationType_rop_oprf,
    ReceiverOperationType_rop_query,
    ReceiverOperationType_rop_response
  };
  return values;
}

inline const char * const *EnumNamesReceiverOperationType() {
  static const char * const names[6] = {
    "rop_unknown",
    "rop_parms",
    "rop_oprf",
    "rop_query",
    "rop_response",
    nullptr
  };
  return names;
}

inline const char *EnumNameReceiverOperationType(ReceiverOperationType e) {
  if (flatbuffers::IsOutRange(e, ReceiverOperationType_rop_unknown, ReceiverOperationType_rop_response)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesReceiverOperationType()[index];
}

struct ReceiverOperationHeader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReceiverOperationHeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_TYPE = 6
  };
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  apsu::network::fbs::ReceiverOperationType type() const {
    return static_cast<apsu::network::fbs::ReceiverOperationType>(GetField<uint32_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VERSION, 4) &&
           VerifyField<uint32_t>(verifier, VT_TYPE, 4) &&
           verifier.EndTable();
  }
};

struct ReceiverOperationHeaderBuilder {
  typedef ReceiverOperationHeader Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(ReceiverOperationHeader::VT_VERSION, version, 0);
  }
  void add_type(apsu::network::fbs::ReceiverOperationType type) {
    fbb_.AddElement<uint32_t>(ReceiverOperationHeader::VT_TYPE, static_cast<uint32_t>(type), 0);
  }
  explicit ReceiverOperationHeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ReceiverOperationHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReceiverOperationHeader>(end);
    return o;
  }
};

inline flatbuffers::Offset<ReceiverOperationHeader> CreateReceiverOperationHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t version = 0,
    apsu::network::fbs::ReceiverOperationType type = apsu::network::fbs::ReceiverOperationType_rop_unknown) {
  ReceiverOperationHeaderBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_version(version);
  return builder_.Finish();
}

inline const apsu::network::fbs::ReceiverOperationHeader *GetReceiverOperationHeader(const void *buf) {
  return flatbuffers::GetRoot<apsu::network::fbs::ReceiverOperationHeader>(buf);
}

inline const apsu::network::fbs::ReceiverOperationHeader *GetSizePrefixedReceiverOperationHeader(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<apsu::network::fbs::ReceiverOperationHeader>(buf);
}

inline bool VerifyReceiverOperationHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<apsu::network::fbs::ReceiverOperationHeader>(nullptr);
}

inline bool VerifySizePrefixedReceiverOperationHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<apsu::network::fbs::ReceiverOperationHeader>(nullptr);
}

inline void FinishReceiverOperationHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<apsu::network::fbs::ReceiverOperationHeader> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedReceiverOperationHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<apsu::network::fbs::ReceiverOperationHeader> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace network
}  // namespace apsu

#endif  // FLATBUFFERS_GENERATED_ROPHEADER_APSU_NETWORK_FBS_H_
