// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CIPHERTEXT_APSU_NETWORK_FBS_H_
#define FLATBUFFERS_GENERATED_CIPHERTEXT_APSU_NETWORK_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace apsu {
namespace network {
namespace fbs {

struct Ciphertext;
struct CiphertextBuilder;

struct Ciphertext FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CiphertextBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct CiphertextBuilder {
  typedef Ciphertext Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Ciphertext::VT_DATA, data);
  }
  explicit CiphertextBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Ciphertext> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Ciphertext>(end);
    fbb_.Required(o, Ciphertext::VT_DATA);
    return o;
  }
};

inline flatbuffers::Offset<Ciphertext> CreateCiphertext(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  CiphertextBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<Ciphertext> CreateCiphertextDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return apsu::network::fbs::CreateCiphertext(
      _fbb,
      data__);
}

inline const apsu::network::fbs::Ciphertext *GetCiphertext(const void *buf) {
  return flatbuffers::GetRoot<apsu::network::fbs::Ciphertext>(buf);
}

inline const apsu::network::fbs::Ciphertext *GetSizePrefixedCiphertext(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<apsu::network::fbs::Ciphertext>(buf);
}

inline bool VerifyCiphertextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<apsu::network::fbs::Ciphertext>(nullptr);
}

inline bool VerifySizePrefixedCiphertextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<apsu::network::fbs::Ciphertext>(nullptr);
}

inline void FinishCiphertextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<apsu::network::fbs::Ciphertext> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCiphertextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<apsu::network::fbs::Ciphertext> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace network
}  // namespace apsu

#endif  // FLATBUFFERS_GENERATED_CIPHERTEXT_APSU_NETWORK_FBS_H_
